<?php

namespace common\models;

use common\components\Constants;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii2tech\ar\softdelete\SoftDeleteBehavior;
use yii2tech\ar\softdelete\SoftDeleteQueryBehavior;

/**
 * This is the model class for table "transfer_order".
 *
 * @property int $id
 * @property int $from
 * @property int $to
 * @property int $product_id
 * @property int $count
 * @property int $status
 * @property int $created_at
 * @property int|null $created_by
 * @property int $updated_at
 * @property int|null $updated_by
 * @property int|null $isDeleted
 */
class TransferOrder extends \common\components\BaseModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'transfer_order';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['from', 'to', 'count', 'product_id'], 'required'],
            ['from', 'compare', 'compareAttribute' => 'to', 'operator' => '!=', 'message' => 'لا يجوز اختيار من والى نفس المحل'],
            [['from', 'to', 'status', 'created_at', 'created_by', 'updated_at', 'updated_by', 'isDeleted', 'product_id'], 'integer'],
            [['count'], 'double'],
            [['count'], 'validateCountExist'],
        ];
    }

    public function validateCountExist($attr)
    {

        if (empty($this->inventoryFrom)) {
            $this->addError($attr, 'لا يوجد بالمخزن من هذه القطعة');
            return false;
        }

        if (!empty($this->count) && $this->count > $this->inventoryFrom->count) {
            $this->addError($attr, 'الا يوجد بالمحل سوى ' . $this->inventoryFrom->count);
        }

    }

    public function behaviors()
    {
        return [
            'softDeleteBehavior' => [
                'class' => SoftDeleteBehavior::className(),
                'softDeleteAttributeValues' => [
                    'isDeleted' => true
                ],
            ],
            TimestampBehavior::className(),
            BlameableBehavior::className(),
        ];
    }

    public function beforeSave($insert)
    {

        if ($this->isNewRecord) {
            // from
            $inventoryFrom = $this->inventoryFrom;
            if ($inventoryFrom) {

                $inventoryFrom->count = $inventoryFrom->count - $this->count;
                $inventoryFrom->save(false);
            }

            // to
            $inventoryTo = $this->inventoryTo;

            if ($inventoryTo) {
                $inventoryTo->count = $inventoryTo->count + $this->count;
                $inventoryTo->save(false);
            } else {
                $Inventory = new Inventory();
                $Inventory->count = $this->count;
                $Inventory->product_id = $this->product_id;
                $Inventory->store_id = $this->to;
                $Inventory->save(false);
            }


        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'الرقم'),
            'from' => Yii::t('app', 'من محل'),
            'to' => Yii::t('app', 'الي محل'),
            'product_id' => Yii::t('app', 'المادة'),
            'count' => Yii::t('app', 'العدد'),
            'created_at' => Yii::t('app', 'تاريخ الانشاء'),
            'created_by' => Yii::t('app', 'الشخص المنشئ'),
            'updated_at' => Yii::t('app', 'تاريخ التعديل'),
            'updated_by' => Yii::t('app', 'الشخص المعدل'),
        ];
    }

    /**
     * {@inheritdoc}
     * @return \common\models\query\TransferOrderQuery the active query used by this AR class.
     */
    public static function find()
    {
        $query = new \common\models\query\TransferOrderQuery(get_called_class());
        $query->attachBehavior('softDelete', SoftDeleteQueryBehavior::className());
        return $query;
    }

    public function getInventoryFrom()
    {
        return $this->hasOne(Inventory::className(), ['product_id' => 'product_id'])->andOnCondition(['inventory.store_id' => $this->from]);
    }

    public function getInventoryTo()
    {
        return $this->hasOne(Inventory::className(), ['product_id' => 'product_id'])->andOnCondition(['inventory.store_id' => $this->to]);
    }
    public function getFromTitle()
    {
        return Constants::getStoreName($this->from);
    }
    public function getToTitle()
    {
        return Constants::getStoreName($this->to);
    }

    public function getProduct()
    {
        return $this->hasOne(Product::className(), ['id' => 'product_id']);
    }
    public function getProductTitle()
    {
        return $this->product ? $this->product->title : '';
    }
}
