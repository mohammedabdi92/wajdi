<?php

namespace common\models;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use common\components\CustomFunc;

/**
 * This is the model class for table "separations".
 *
 * @property int $id
 * @property int|null $product_id_from
 * @property int|null $product_id_to
 * @property int|null $store_id
 * @property float|null $count_from
 * @property float|null $count_to
 * @property int|null $order_id
 * @property int $created_at
 * @property int $created_by
 * @property int|null $updated_at
 * @property int|null $updated_by
 */
class Separations extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'separations';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['product_id_from', 'product_id_to', 'created_at', 'created_by', 'updated_at', 'updated_by','store_id'], 'integer'],
            [['count_from','count_to'], 'double'],
            [['product_id_from'], 'checkInventory'],
            [['product_id_from', 'product_id_to','count_from','count_to','store_id'], 'required'],
        ];
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            BlameableBehavior::className(),
        ];
    }
    public function checkInventory($attr) {

        if($this->isNewRecord  && $this->product_id_from && $this->store_id)
        { 
            $Inventory =  Inventory::findOne(['product_id'=>$this->product_id_from,'store_id'=>$this->store_id]);
           if($Inventory)
           {
            if($Inventory->count < $this->count_from)
            {
                $this->addError('count_from','عدد المادة غير موجود بالمخزن');
                
            }

           }else{
            $this->addError('product_id_from','المادة غير موجودة بالمخزن');
           }
        }
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' =>  'الرقم',
            'store_id' => 'المحل',
            'product_id_from' => 'المادة المحول منها',
            'product_id_to' => 'المادة المحول اليها',
            'count_to' => 'العدد المحول اليه',
            'count_from' => 'العدد المحول منه',
            'created_at' =>  'تاريخ الانشاء',
            'created_by' =>  'الشخص المنشئ',
            'updated_at' =>  'تاريخ التعديل',
            'updated_by' =>  'الشخص المعدل',
        ];
    }
    public function getProductFrom()
    {
        return $this->hasOne(Product::className(), ['id' => 'product_id_from']);
    }
    public function getProductTo()
    {
        return $this->hasOne(Product::className(), ['id' => 'product_id_to']);
    }
    public function getProductToTitle()
    {
        return $this->productFrom ? $this->productFrom->title : '';
    }

    public function getProductFromTitle()
    {
        return $this->productTo ? $this->productTo->title : '';
    }
    public function getStore()
    {
        return $this->hasOne(Store::className(), ['id' => 'store_id']);
    }

    public function getStoreTitle()
    {
        return $this->store->name??'';
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        CustomFunc::calculateProductCount($this->store_id, $this->product_id_from);
        CustomFunc::calculateProductCount($this->store_id, $this->product_id_to);

    }

    public function afterDelete()
    {
        CustomFunc::calculateProductCount($this->store_id, $this->product_id_from);
        CustomFunc::calculateProductCount($this->store_id, $this->product_id_to);

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

}